[
    {
        "id": "4c8927a996e51367",
        "type": "tab",
        "label": "Ready",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3de863bff12862a7",
        "type": "tab",
        "label": "MQTT HTW",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4d1775cd06a6dc2d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a0384691b6a093cd",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c68414393af68971",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2d8cfa6604cf8dd2",
        "type": "mqtt-broker",
        "name": "10.10.10.220:1883 - Prof Raspi",
        "broker": "10.10.10.220",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "af321f0d17895010",
        "type": "ui_group",
        "name": "Standard",
        "tab": "a33616b107dab495",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a33616b107dab495",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "85357b5138fdd2a8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "22bb772ecc40bb03",
        "type": "mqtt-broker",
        "name": "localhost MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fb2d836a52220b58",
        "type": "mqtt-broker",
        "name": "192.168.0.217:1883 - Zuhause",
        "broker": "192.168.0.217",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9b317c87d15dbc65",
        "type": "ui_group",
        "name": "Lamp",
        "tab": "a33616b107dab495",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c78617f85e9f789d",
        "type": "telegram bot",
        "botname": "572665",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "ab8ece1b6c44c242",
        "type": "mqtt-broker",
        "name": "10.10.10.199:1883 - Uni",
        "broker": "10.10.10.199",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "65ca12172854cc2d",
        "type": "telegram bot",
        "botname": "HeinzBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "d4238da0cbf7f4d8",
        "type": "ui_chart",
        "z": "4c8927a996e51367",
        "name": "Temperature",
        "group": "af321f0d17895010",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "aaa849046d90f65f",
        "type": "mqtt in",
        "z": "4c8927a996e51367",
        "name": "Temperature",
        "topic": "Home/Temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab8ece1b6c44c242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "75cde3f6f75be1e7"
            ]
        ]
    },
    {
        "id": "4e16e2f6c45c9c53",
        "type": "mqtt in",
        "z": "4c8927a996e51367",
        "name": "Humidity",
        "topic": "Home/Humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab8ece1b6c44c242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "f57faee35a0b19e9"
            ]
        ]
    },
    {
        "id": "75cde3f6f75be1e7",
        "type": "string",
        "z": "4c8927a996e51367",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "temp:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "3298f2bfb728fb83"
            ]
        ]
    },
    {
        "id": "3298f2bfb728fb83",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "d4238da0cbf7f4d8",
                "a8cc4a5d149921e5",
                "5d60c7f29a596aae",
                "fbb15b3959209511"
            ]
        ]
    },
    {
        "id": "273738830df2446b",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "cd6a14f652787c12",
                "f4e425010d742af4",
                "70edb00b9b7aa580",
                "3282051a1b939be7"
            ]
        ]
    },
    {
        "id": "f57faee35a0b19e9",
        "type": "string",
        "z": "4c8927a996e51367",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "humi:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "273738830df2446b"
            ]
        ]
    },
    {
        "id": "cd6a14f652787c12",
        "type": "ui_gauge",
        "z": "4c8927a996e51367",
        "name": "Humidity",
        "group": "af321f0d17895010",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "Humidity",
        "format": "{{value}}",
        "min": 0,
        "max": "100.0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 640,
        "y": 260,
        "wires": []
    },
    {
        "id": "f4e425010d742af4",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8cc4a5d149921e5",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "70edb00b9b7aa580",
        "type": "ui_chart",
        "z": "4c8927a996e51367",
        "name": "Humidity",
        "group": "af321f0d17895010",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5d60c7f29a596aae",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "fbb15b3959209511",
        "type": "change",
        "z": "4c8927a996e51367",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 200,
        "wires": [
            [
                "3da556bb887f9d27"
            ]
        ]
    },
    {
        "id": "651a5681f376d669",
        "type": "telegram event",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "event": "callback_query",
        "autoanswer": false,
        "x": 180,
        "y": 600,
        "wires": [
            [
                "1391c56efd243812"
            ]
        ]
    },
    {
        "id": "1391c56efd243812",
        "type": "switch",
        "z": "4c8927a996e51367",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "temp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "humi",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "both",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 600,
        "wires": [
            [
                "c6a98830eaa3384c"
            ],
            [
                "64b52391fb51439a"
            ],
            [
                "518c52e62b6f0a33"
            ]
        ]
    },
    {
        "id": "c6a98830eaa3384c",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "temp",
        "func": "var chatId = msg.payload.chatId;\n\nreturn {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: 'Temperature: ' + flow.get(\"temperature\") + '°C'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "590b1923283e49dc"
            ]
        ]
    },
    {
        "id": "590b1923283e49dc",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 730,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "64b52391fb51439a",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "humi",
        "func": "var chatId = msg.payload.chatId;\n\nreturn {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: 'Humidity: ' + flow.get(\"humidity\") + '%'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 600,
        "wires": [
            [
                "590b1923283e49dc"
            ]
        ]
    },
    {
        "id": "518c52e62b6f0a33",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "both",
        "func": "var chatId = msg.payload.chatId;\nvar message = \"\";\nmessage += \"\\r\\n\" + \"Temperature: \" + flow.get(\"temperature\") + '°C';\nmessage += \"\\r\\n\" + \"Humidity: \" + flow.get(\"humidity\") + '%';\n\nreturn {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: message\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 660,
        "wires": [
            [
                "590b1923283e49dc"
            ]
        ]
    },
    {
        "id": "5bf760fa856b792a",
        "type": "telegram command",
        "z": "4c8927a996e51367",
        "name": "",
        "command": "/sensor",
        "description": "Inlinekeyboard that accesses sensory data",
        "registercommand": true,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "80f575739701843c"
            ],
            []
        ]
    },
    {
        "id": "80f575739701843c",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Inline Keyboard",
        "func": "\nvar keyboard = {\n    reply_markup: JSON.stringify({\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Temperature\",\n                    \"callback_data\": \"temp\"\n                },\n                {\n                    \"text\": \"Humidity\",\n                    \"callback_data\": \"humi\"\n                },\n                {\n                    \"text\": \"All data\",\n                    \"callback_data\": \"both\"\n                }\n            ]\n        ]\n    })\n};\n\nmsg.payload.content = \"This keyboard accesses the sensory data:\";\nmsg.payload.options = keyboard;\nmsg.payload.type = \"message\";\n\nreturn [msg]\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 440,
        "wires": [
            [
                "181325db5325cd70"
            ]
        ]
    },
    {
        "id": "181325db5325cd70",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 610,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3da556bb887f9d27",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "3282051a1b939be7",
        "type": "change",
        "z": "4c8927a996e51367",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "humidity",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "06674606eaa5a37a",
        "type": "telegram command",
        "z": "4c8927a996e51367",
        "name": "",
        "command": "/help",
        "description": "Returns a list of supported commands",
        "registercommand": true,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 150,
        "y": 760,
        "wires": [
            [
                "25e7db141ec03348",
                "fde0e27b4f599201"
            ],
            []
        ]
    },
    {
        "id": "25e7db141ec03348",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Simple command response",
        "func": "var chatId = msg.payload.chatId;\nvar message = \"\";\nmessage += \"\\r\\n\" + \"/hello\";\nmessage +=  \" - \" + \"returns World!\";\nmessage += \"\\r\\n\" + \"Writing ’Hello’\";\nmessage +=  \" - \" + \"returns ’World!’ too\";\nmessage += \"\\r\\n\" + \"/loopOn\";\nmessage += \" - \" + \"turns the automatic message loop On\";\nmessage += \"\\r\\n\" + \"/loopOff\";\nmessage += \" - \" + \"turns the automatic message loop Off\";\nmessage += \"\\r\\n\" + \"/keyboard\";\nmessage += \" - \" + \"returns an tricky InlineKeyboard!\";\nvar response = {\n    payload: {\n        chatId: chatId,\n        type: \"message\",\n        content: message\n    }\n}\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "9463298374563a57",
                "f77e43b05ccce4a3"
            ]
        ]
    },
    {
        "id": "9463298374563a57",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 650,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f77e43b05ccce4a3",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 840,
        "wires": []
    },
    {
        "id": "fde0e27b4f599201",
        "type": "debug",
        "z": "4c8927a996e51367",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 840,
        "wires": []
    },
    {
        "id": "beb4c0e9ef7275b5",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Simple command response",
        "func": "var chatId = msg.payload.chatId;\nvar response = {\n    payload: {\n        chatId: chatId,\n        type: \"message\",\n        content:\"World!\"\n    }\n}\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 940,
        "wires": [
            [
                "ddc085e5b94401f2"
            ]
        ]
    },
    {
        "id": "31bbcb0e63347c06",
        "type": "telegram command",
        "z": "4c8927a996e51367",
        "name": "",
        "command": "/hello",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 150,
        "y": 940,
        "wires": [
            [
                "beb4c0e9ef7275b5"
            ],
            []
        ]
    },
    {
        "id": "ddc085e5b94401f2",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 650,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6860e702d31af160",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 730,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "0dff7b7ffc052896",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Simple hello text response",
        "func": "if (msg.payload.content == \"Hello\") {\n    msg.payload.content = \"World!\"\n    return msg\n} else {\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1000,
        "wires": [
            [
                "6860e702d31af160"
            ]
        ]
    },
    {
        "id": "41c8086f478a31bb",
        "type": "telegram receiver",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "0dff7b7ffc052896"
            ],
            []
        ]
    },
    {
        "id": "9be18a25479b27ef",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Simple direct message",
        "func": "return {\n    payload: {\n        chatId: 59221384,\n        type: 'message',\n        content: 'Hai Miri c:'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1100,
        "wires": [
            [
                "c36846554716c0ea"
            ]
        ]
    },
    {
        "id": "821ed0dfd4d1291f",
        "type": "inject",
        "z": "4c8927a996e51367",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "9be18a25479b27ef"
            ]
        ]
    },
    {
        "id": "c36846554716c0ea",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 630,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "a5626faeca62e80c",
        "type": "telegram sender",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 710,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "fec1c94d159eb102",
        "type": "telegram receiver",
        "z": "4c8927a996e51367",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "12aeb70735be1668"
            ],
            []
        ]
    },
    {
        "id": "12aeb70735be1668",
        "type": "function",
        "z": "4c8927a996e51367",
        "name": "Simple controlled loop response",
        "func": "// Think how to exclude the commands in the loop \n// a little bit smarter xD\nif (msg.payload.content == \"/loopOn\") { \n    return\n}\nif (msg.payload.content == \"/loopOff\") { \n    return\n}\nif (flow.get(\"loopCondition\") == true) {\n    return msg\n} else {\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1320,
        "wires": [
            [
                "a5626faeca62e80c"
            ]
        ]
    },
    {
        "id": "4ee7104ca2a4c8bb",
        "type": "telegram command",
        "z": "4c8927a996e51367",
        "name": "",
        "command": "/loopOn",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 150,
        "y": 1200,
        "wires": [
            [
                "6060c738b9bfe97d"
            ],
            []
        ]
    },
    {
        "id": "6060c738b9bfe97d",
        "type": "change",
        "z": "4c8927a996e51367",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "loopCondition",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "fb3a6cb390cc953e",
        "type": "telegram command",
        "z": "4c8927a996e51367",
        "name": "",
        "command": "/loopOff",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "014a8e8fd4b0cc6b"
            ],
            []
        ]
    },
    {
        "id": "014a8e8fd4b0cc6b",
        "type": "change",
        "z": "4c8927a996e51367",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "loopCondition",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "20e6e345ef9d9a65",
        "type": "mqtt out",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/test",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2d8cfa6604cf8dd2",
        "x": 1290,
        "y": 140,
        "wires": []
    },
    {
        "id": "15331e53ee8ba609",
        "type": "mqtt in",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "2d8cfa6604cf8dd2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "d66999a38a3bbccf"
            ]
        ]
    },
    {
        "id": "b9f1f1cc67a58de9",
        "type": "inject",
        "z": "3de863bff12862a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 140,
        "wires": [
            [
                "20e6e345ef9d9a65"
            ]
        ]
    },
    {
        "id": "d66999a38a3bbccf",
        "type": "debug",
        "z": "3de863bff12862a7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 260,
        "wires": []
    },
    {
        "id": "7e2351c0bf114668",
        "type": "function",
        "z": "3de863bff12862a7",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 400,
        "wires": [
            [
                "3cdb2ab1a2a771c8",
                "5a9833701bc521fa",
                "20e6e345ef9d9a65"
            ]
        ]
    },
    {
        "id": "21b621d719fd940b",
        "type": "function",
        "z": "3de863bff12862a7",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "36de53dd0a6d2ecd",
                "5f0ca2c7bd812dd4",
                "20e6e345ef9d9a65"
            ]
        ]
    },
    {
        "id": "237f2ca041aea1d4",
        "type": "string",
        "z": "3de863bff12862a7",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "temp:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "7e2351c0bf114668"
            ]
        ]
    },
    {
        "id": "bd883730f60b1d50",
        "type": "string",
        "z": "3de863bff12862a7",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "humi:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "21b621d719fd940b"
            ]
        ]
    },
    {
        "id": "3cdb2ab1a2a771c8",
        "type": "debug",
        "z": "3de863bff12862a7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 400,
        "wires": []
    },
    {
        "id": "36de53dd0a6d2ecd",
        "type": "debug",
        "z": "3de863bff12862a7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 460,
        "wires": []
    },
    {
        "id": "0a84581da97f4aea",
        "type": "mqtt in",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/Temp/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "2d8cfa6604cf8dd2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "237f2ca041aea1d4"
            ]
        ]
    },
    {
        "id": "cf6e0770fc223046",
        "type": "mqtt in",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/Humi/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "2d8cfa6604cf8dd2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "bd883730f60b1d50"
            ]
        ]
    },
    {
        "id": "5f0ca2c7bd812dd4",
        "type": "ui_chart",
        "z": "3de863bff12862a7",
        "name": "",
        "group": "af321f0d17895010",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1010,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5a9833701bc521fa",
        "type": "ui_chart",
        "z": "3de863bff12862a7",
        "name": "",
        "group": "af321f0d17895010",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1010,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e80aa47e508176c2",
        "type": "mqtt in",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/humi/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "2d8cfa6604cf8dd2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 520,
        "wires": [
            [
                "bd883730f60b1d50"
            ]
        ]
    },
    {
        "id": "e85c986e4a4ecb7c",
        "type": "mqtt in",
        "z": "3de863bff12862a7",
        "name": "",
        "topic": "HTWIoT/temp/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "2d8cfa6604cf8dd2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 360,
        "wires": [
            [
                "237f2ca041aea1d4"
            ]
        ]
    },
    {
        "id": "297f848a2e285c55",
        "type": "telegram receiver",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "90f06536410457e8",
                "19e82d998788a7a0",
                "c001544bda0fc5ef"
            ],
            []
        ]
    },
    {
        "id": "6726bb55f5da3e53",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 790,
        "y": 160,
        "wires": [
            [
                "b8c0e090a20e7603"
            ]
        ]
    },
    {
        "id": "90f06536410457e8",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "19e82d998788a7a0",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "function 1",
        "func": "if (msg.payload.content == \"Hello\")\n    msg.payload.content = \"World!\"\n    return msg\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "1ceadfd1b355a233"
            ]
        ]
    },
    {
        "id": "1ceadfd1b355a233",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "b8c0e090a20e7603",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "a33b92e4d6532810",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Simple message",
        "func": "return {\n    payload: {\n        chatId: 59221384,\n        type: 'message',\n        content: 'Hai Miri c:'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 700,
        "wires": [
            [
                "a5bc41f01185e63b"
            ]
        ]
    },
    {
        "id": "ad72227ff004a96f",
        "type": "inject",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "a33b92e4d6532810"
            ]
        ]
    },
    {
        "id": "7eb22793f18b220f",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Msg example",
        "func": "msg = {\n    \"chatId\": 59221384,\n    \"type\": \"message\",\n    \"content\": {\n        \"message_id\": 78,\n        \"from\": {\n            \"id\": 5628030675,\n            \"is_bot\": true,\n            \"first_name\": \"572665\",\n            \"username\": \"s572665bot\"\n            },\n        \"chat\": {\n            \"id\": 59221384,\n            \"first_name\": \"Mirijam\",\n            \"last_name\": \"Tigress - ̗̀•ᴥ• ̖́- 🐾 𐂂 ෴ 𓃹 𓃥\",\n            \"username\": \"Eievui\",\n            \"type\": \"private\"\n            },\n        \"date\": 1671193791,\n        \"text\": \"Hai Miri c:\"\n    },\n    \"options\": {\n        \"chat_id\": 59221384,\n        \"text\": \"Hai Miri c:\"\n        },\n    \"sentMessageId\": 78\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c001544bda0fc5ef",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "filer: \"chatId\"",
        "func": "var chatId = msg.payload.chatId;\nvar result = { \n                payload: { \n                    chatId: chatId\n                }\n            }\n\nreturn result;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "07a9db6d8e737474"
            ]
        ]
    },
    {
        "id": "07a9db6d8e737474",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 360,
        "wires": []
    },
    {
        "id": "c95f206bb530c1fb",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Notizen",
        "func": "/*\nhttps://flows.nodered.org/node/node-red-contrib-telegrambot\nhttps://core.telegram.org/bots/features\n\n\nmsg.payload mindest Anforderung:\n    payload.chatId\n    payload.type\n    payload.content\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c24321d6cb455a2c",
        "type": "telegram command",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "command": "/hello",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 840,
        "wires": [
            [
                "7ae369413ef330e3"
            ],
            []
        ]
    },
    {
        "id": "7ae369413ef330e3",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Simple command response",
        "func": "var chatId = msg.payload.chatId;\nvar response = {\n    payload: {\n        chatId: chatId,\n        type: \"message\",\n        content:\"World!\"\n    }\n}\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 840,
        "wires": [
            [
                "403b29b604138149"
            ]
        ]
    },
    {
        "id": "403b29b604138149",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 610,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "a5bc41f01185e63b",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 630,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9fd05ecc334d3f7c",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 670,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "55180bea3156eed8",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Simple text response",
        "func": "if (msg.payload.content == \"Hello\") {\n    msg.payload.content = \"World!\"\n    return msg\n} else {\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "9fd05ecc334d3f7c"
            ]
        ]
    },
    {
        "id": "925972b7255e3ab2",
        "type": "telegram receiver",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "55180bea3156eed8"
            ],
            []
        ]
    },
    {
        "id": "ba80e91fbb4452fd",
        "type": "telegram receiver",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 130,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "517641cf23d1a6e2",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 390,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "fa074f5b9a4507bc",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "4e9d08cf24e7f92c",
        "type": "telegram receiver",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "ce22bb870ac492d1"
            ],
            []
        ]
    },
    {
        "id": "ce22bb870ac492d1",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Simple controlled loop response",
        "func": "// Think how to exclude the commands in the loop \n// a little bit smarter xD\nif (msg.payload.content == \"/loopOn\") { \n    return\n}\nif (msg.payload.content == \"/loopOff\") { \n    return\n}\nif (flow.get(\"loopCondition\") == true) {\n    return msg\n} else {\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "fa074f5b9a4507bc"
            ]
        ]
    },
    {
        "id": "f4354a8e3f5702e0",
        "type": "telegram command",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "command": "/loopOn",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 130,
        "y": 1200,
        "wires": [
            [
                "5fdbfbffd5097333"
            ],
            []
        ]
    },
    {
        "id": "5fdbfbffd5097333",
        "type": "change",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "loopCondition",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "262cf1c778c8242e",
        "type": "telegram command",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "command": "/help",
        "description": "Returns a list of supported commands",
        "registercommand": true,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 920,
        "wires": [
            [
                "e926d79d75bf2877",
                "2c9cfb387677deed"
            ],
            []
        ]
    },
    {
        "id": "e926d79d75bf2877",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Simple command response",
        "func": "var chatId = msg.payload.chatId;\nvar message = \"\";\nmessage += \"\\r\\n\" + \"/hello\";\nmessage +=  \" - \" + \"returns World!\";\nmessage += \"\\r\\n\" + \"Writing ’Hello’\";\nmessage +=  \" - \" + \"returns ’World!’ too\";\nmessage += \"\\r\\n\" + \"/loopOn\";\nmessage += \" - \" + \"turns the automatic message loop On\";\nmessage += \"\\r\\n\" + \"/loopOff\";\nmessage += \" - \" + \"turns the automatic message loop Off\";\nmessage += \"\\r\\n\" + \"/keyboard\";\nmessage += \" - \" + \"returns an tricky InlineKeyboard!\";\nvar response = {\n    payload: {\n        chatId: chatId,\n        type: \"message\",\n        content: message\n    }\n}\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 920,
        "wires": [
            [
                "47b0952f68a49e48",
                "a731a068a3869194"
            ]
        ]
    },
    {
        "id": "47b0952f68a49e48",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 610,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "a731a068a3869194",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2c9cfb387677deed",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a3b51dceb5d9eeee",
        "type": "telegram command",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "command": "/loopOff",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "182422ad7505c5a7"
            ],
            []
        ]
    },
    {
        "id": "182422ad7505c5a7",
        "type": "change",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "loopCondition",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "0668a89fb94d3d26",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Notiz",
        "func": "/*\nNotiz:\n    https://stevesnoderedguide.com/node-red-variables\n    variablen in nodeRed\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "01712b2984adf815",
        "type": "telegram event",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "event": "callback_query",
        "autoanswer": false,
        "x": 160,
        "y": 1560,
        "wires": [
            [
                "ed1ed5ccf01c1d5d",
                "617f9502f86526a3"
            ]
        ]
    },
    {
        "id": "5d36860d19ae7443",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Inline Keyboard",
        "func": "\nvar keyboard = {\n    reply_markup: JSON.stringify({\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"5\",\n                    \"callback_data\": \"five\"\n                },\n                {\n                    \"text\": \"7\",\n                    \"callback_data\": \"seven\"\n                }\n            ]\n        ]\n    })\n};\n\nmsg.payload.content = \"Whas is 3+2?\";\nmsg.payload.options = keyboard;\nmsg.payload.type = \"message\";\n\nreturn [ msg ]\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1480,
        "wires": [
            [
                "10360c89a80117e7"
            ]
        ]
    },
    {
        "id": "ed1ed5ccf01c1d5d",
        "type": "switch",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "five",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "seven",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "7bd9831b77c8f7d2"
            ],
            [
                "4e24c3d84830c92c"
            ]
        ]
    },
    {
        "id": "7bd9831b77c8f7d2",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "Correct",
        "func": "var chatId = msg.payload.chatId;\n\nreturn {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: 'Correct'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "10360c89a80117e7"
            ]
        ]
    },
    {
        "id": "4e24c3d84830c92c",
        "type": "function",
        "z": "4d1775cd06a6dc2d",
        "name": "False",
        "func": "var chatId = msg.payload.chatId;\n\nreturn {\n    payload: {\n        chatId: chatId,\n        type: 'message',\n        content: 'False'\n        }\n    };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "10360c89a80117e7"
            ]
        ]
    },
    {
        "id": "10360c89a80117e7",
        "type": "telegram sender",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "bot": "c78617f85e9f789d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 770,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "709e330cb990efc1",
        "type": "telegram command",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "command": "/keyboard",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c78617f85e9f789d",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 140,
        "y": 1480,
        "wires": [
            [
                "5d36860d19ae7443"
            ],
            []
        ]
    },
    {
        "id": "617f9502f86526a3",
        "type": "debug",
        "z": "4d1775cd06a6dc2d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 1640,
        "wires": []
    },
    {
        "id": "b6478cad9adf51c1",
        "type": "ui_switch",
        "z": "a0384691b6a093cd",
        "name": "",
        "label": "Lamp",
        "tooltip": "",
        "group": "9b317c87d15dbc65",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "Home/Light",
        "topicType": "str",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "154923600fc91e94"
            ]
        ]
    },
    {
        "id": "5ec88026508a402e",
        "type": "ui_chart",
        "z": "a0384691b6a093cd",
        "name": "Temperature",
        "group": "af321f0d17895010",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c7a540e4a388ec42",
        "type": "mqtt in",
        "z": "a0384691b6a093cd",
        "name": "Temperature",
        "topic": "Home/Temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab8ece1b6c44c242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "2c8d5a119f6535f8"
            ]
        ]
    },
    {
        "id": "c743509dab58a635",
        "type": "mqtt in",
        "z": "a0384691b6a093cd",
        "name": "Humidity",
        "topic": "Home/Humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab8ece1b6c44c242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "392276b2e3f04b49"
            ]
        ]
    },
    {
        "id": "154923600fc91e94",
        "type": "mqtt out",
        "z": "a0384691b6a093cd",
        "name": "",
        "topic": "Home/Light",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ab8ece1b6c44c242",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "26514b3938c3aab8",
        "type": "mqtt in",
        "z": "a0384691b6a093cd",
        "name": "Light",
        "topic": "Home/Light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ab8ece1b6c44c242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 300,
        "wires": [
            [
                "a21b67f8bc487ba1"
            ]
        ]
    },
    {
        "id": "a21b67f8bc487ba1",
        "type": "ui_text",
        "z": "a0384691b6a093cd",
        "group": "af321f0d17895010",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Light",
        "label": "Light",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "2c8d5a119f6535f8",
        "type": "string",
        "z": "a0384691b6a093cd",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "temp:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "b0d49119559b0448"
            ]
        ]
    },
    {
        "id": "b0d49119559b0448",
        "type": "function",
        "z": "a0384691b6a093cd",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "5ec88026508a402e",
                "c59676e6afaaef6a"
            ]
        ]
    },
    {
        "id": "6b35fec66d92bd2e",
        "type": "function",
        "z": "a0384691b6a093cd",
        "name": "",
        "func": "msg.payload = parseFloat(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "ae015c6993879374",
                "1351ab541d568c16",
                "96f6e4cfc8722685"
            ]
        ]
    },
    {
        "id": "392276b2e3f04b49",
        "type": "string",
        "z": "a0384691b6a093cd",
        "name": "",
        "methods": [
            {
                "name": "delLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": "humi:"
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "6b35fec66d92bd2e"
            ]
        ]
    },
    {
        "id": "ae015c6993879374",
        "type": "ui_gauge",
        "z": "a0384691b6a093cd",
        "name": "Humidity",
        "group": "af321f0d17895010",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "Humidity",
        "format": "{{value}}",
        "min": 0,
        "max": "100.0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "1351ab541d568c16",
        "type": "debug",
        "z": "a0384691b6a093cd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "c59676e6afaaef6a",
        "type": "debug",
        "z": "a0384691b6a093cd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "96f6e4cfc8722685",
        "type": "ui_chart",
        "z": "a0384691b6a093cd",
        "name": "Humidity",
        "group": "af321f0d17895010",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c18f49.063c4",
        "type": "telegram sender",
        "z": "c68414393af68971",
        "name": "",
        "bot": "65ca12172854cc2d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 950,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f97878f7.de1bf8",
        "type": "function",
        "z": "c68414393af68971",
        "name": "build keyboard",
        "func": "var opts = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"A1\",\n                    \"callback_data\": \"1\"            \n                }, \n                {\n                    \"text\": \"A2\",\n                    \"callback_data\": \"2\"            \n                }]\n            ]\n  })\n};\n\nmsg.payload.content = \"Selection?\";\nmsg.payload.options = opts;\nmsg.payload.chatId = 138708568;\nmsg.payload.messageId = 29;\nmsg.payload.sentMessageId = 29;\nmsg.payload.type = \"message\";\n\nreturn [ msg ];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "f7c18f49.063c4",
                "67925ff5.4c7c9"
            ]
        ]
    },
    {
        "id": "67925ff5.4c7c9",
        "type": "debug",
        "z": "c68414393af68971",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 240,
        "wires": []
    },
    {
        "id": "e1a6a394.269598",
        "type": "inject",
        "z": "c68414393af68971",
        "name": "",
        "props": [
            {
                "p": "payload.content",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 450,
        "y": 280,
        "wires": [
            [
                "f97878f7.de1bf8"
            ]
        ]
    },
    {
        "id": "981d4537.1ced18",
        "type": "telegram event",
        "z": "c68414393af68971",
        "name": "",
        "bot": "65ca12172854cc2d",
        "event": "callback_query",
        "autoanswer": false,
        "x": 460,
        "y": 362,
        "wires": [
            [
                "385615779f4b3364"
            ]
        ]
    },
    {
        "id": "93430912.0f4f4",
        "type": "comment",
        "z": "c68414393af68971",
        "name": "Inline keyboard: Reply with \"callback_query\"",
        "info": "",
        "x": 570,
        "y": 222,
        "wires": []
    },
    {
        "id": "385615779f4b3364",
        "type": "function",
        "z": "c68414393af68971",
        "name": "answerCallbackQuery",
        "func": "var text = \"You clicked \" + msg.payload.content;\nvar options = {\n    // text : text, <-- you can set the text here or use msg.payload.content \n    show_alert : true,\n    cache_time : 10\n};\n\nmsg.payload.content = text;\nmsg.payload.options = options;\nmsg.payload.type = \"answerCallbackQuery\";\n\nreturn [ msg ];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 360,
        "wires": [
            [
                "f7c18f49.063c4"
            ]
        ]
    }
]